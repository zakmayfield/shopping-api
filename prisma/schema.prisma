generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ::: HQ ::: 
model HQ { // 1 hq can have 1 address, many stores
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  address   HQAddress?

  stores Store[]
}

model HQAddress {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address         String
  apartment       String?
  city            String
  stateOrProvince String
  zip             String
  country         String

  hq HQ @relation(fields: [hqId], references: [id])
  hqId Int @unique
}

// ::: STORE ::: 
model Store { // 1 store can have 1 address, 1 hq, many products
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  address   StoreAddress?

  hq   HQ?  @relation(fields: [hqId], references: [id])
  hqId Int?

  products ProductsOnStores[]
}

model StoreAddress {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address         String
  apartment       String?
  city            String
  stateOrProvince String
  zip             String
  country         String

  store Store @relation(fields: [storeId], references: [id])
  storeId Int @unique
}

// ::: PRODUCT :::
model Discount { // 1 discount can have many products
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  // '10% off order'
  description String?
  // activating this discount will grant you 10% off of your first order
  expiresIn   String? // 2d, 3w, 4m, 1y // {number}{string: d | w | m | y}
  // once activated this discount will be active for a set time
  percent     Int?
  // percentage off i.e {10}
  isActive    Boolean @default(false)
  // this discount needs to be active in order for members to use

  discountedProducts Product[]
  discountedCategories ProductCategory[]
  // this will spit out an array of products using this specific discount
}

model ProductCategory {
  // Consider applying category discounts. 1 discount can have many categories {{ categories ProductCategories[] }}
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String  @unique
  code String?

  discount Discount? @relation(fields: [discountId], references: [id])
  discountId Int?

  products CategoriesOnProducts[]
}

model Product { // 1 product can have 1 discount, many categories, many stores
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name             String
  description      String?
  price            Int?
  isDiscountActive Boolean @default(false)

  discount   Discount? @relation(fields: [discountId], references: [id])
  discountId Int?

  categorys CategoriesOnProducts[]
  stores ProductsOnStores[]
}

model CategoriesOnProducts { // JOIN categories & products
  product Product @relation(fields: [productId], references: [id])
  productId Int

  category ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([productId, categoryId])
}

model ProductsOnStores { // JOIN products & stores with shared quantity property
  product Product @relation(fields: [productId], references: [id])
  productId Int

  store Store @relation(fields: [storeId], references: [id])
  storeId Int

  quantity Int?

  @@id([productId, storeId])
}

// ::: MEMBER :::
model MemberShippingAddress {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address         String
  apartment       String?
  city            String
  stateOrProvince String
  zip             String
  country         String

  member Member @relation(fields: [memberId], references: [id])
  memberId Int
}

model MemberBillingAddress {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address         String
  apartment       String?
  city            String
  stateOrProvince String
  zip             String
  country         String

  member Member @relation(fields: [memberId], references: [id])
  memberId Int
}

model MemberPayment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  provider       String
  // mastercard || visa
  nameOnCard     String
  // geralt of rivia
  cardNumber     Int
  // 1234 1234 1234 1234
  expirationDate DateTime
  // date time can format on frontend
  cvv            Int
  // 722

  member Member @relation(fields: [memberId], references: [id])
  memberId Int
}

model MemberProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?
  lastName String?
  username String?
  points Int? @default(0)

  member Member @relation(fields: [memberId], references: [id])
  memberId Int @unique
}

model Member { // 1 member can have 1 payment, 1 billing address, 1 shipping address, 
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String  @unique
  // zaarmad@email.com
  password  String
  // abc123
  token     String?
  // jwt

  profile MemberProfile?
  payments MemberPayment[]
  billingAddresses MemberBillingAddress[]
  shippingAddresses MemberShippingAddress[]
}





// // HQ
// model HQAddress {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   address         String
//   apartment       String?
//   city            String
//   stateOrProvince String
//   zip             String
//   country         String

//   hqs HQ[]
// }

// model HQ {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name String

//   address   HQAddress? @relation(fields: [addressId], references: [id])
//   addressId Int?
//   // each HQ has an address, which is stored in its own table HQAddress
//   // this means an HQ can be created without setting an address initially (flexible)

//   stores Store[]
// }

// // STORE
// model StoreAddress {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   address         String
//   apartment       String?
//   city            String
//   stateOrProvince String
//   zip             String
//   country         String

//   stores Store[]
//   // array with store associated to this id ( i believe )
// }

// model Store {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name String @unique
//   // name of store / shop / branch

//   address   StoreAddress? @relation(fields: [addressId], references: [id])
//   addressId Int?
//   // same deal with HQ having an address

//   hq   HQ?  @relation(fields: [hqId], references: [id])
//   hqId Int?
//   // each store will be run by a HQ

//   inventory Product[]
//   // array containing all products associated to this store
// }

// // PRODUCT
// model ProductDiscount {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name        String
//   // '10% off order'
//   description String?
//   // activating this discount will grant you 10% off of your first order
//   expiresIn   String? // 2d, 3w, 4m, 1y // {number}{string: d | w | m | y}
//   // once activated this discount will be active for a set time
//   percent     Int?
//   // percentage off i.e {10}
//   isActive    Boolean @default(false)
//   // this discount needs to be active in order for members to use

//   discountedProducts Product[]
//   // this will spit out an array of products using this specific discount
// }

// model ProductCategory {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name String  @unique
//   // independent artists
//   code String?
//   // ia

//   products Product[]
//   // array of products in this category
// }

// model Product {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name             String
//   // custom engraved coaster
//   description      String?
//   // a hand carved coaster
//   price            Int?
//   // 12
//   isDiscountActive Boolean @default(false)
//   // false | true

//   store   Store? @relation(fields: [storeId], references: [id])
//   storeId Int?

//   discount   ProductDiscount? @relation(fields: [discountId], references: [id])
//   discountId Int?

//   category   ProductCategory? @relation(fields: [categoryId], references: [id])
//   categoryId Int?

//   cartItem CartItem[]
// }

// // MEMBER 
// model MemberShippingAddress {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   address         String
//   apartment       String?
//   city            String
//   stateOrProvince String
//   zip             String
//   country         String

//   member Member[]
// }

// model MemberBillingAddress {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   address         String
//   apartment       String?
//   city            String
//   stateOrProvince String
//   zip             String
//   country         String

//   member Member[]
// }

// model MemberPayment {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   provider       String
//   // mastercard || visa
//   nameOnCard     String
//   // geralt of rivia
//   cardNumber     Int
//   // 1234 1234 1234 1234
//   expirationDate DateTime
//   // date time can format on frontend
//   cvv            Int
//   // 722

//   member Member[]
// }

// model Member {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   email     String  @unique
//   // zaarmad@email.com
//   password  String
//   // abc123
//   token     String?
//   // jwt
//   points    Int?
//   // 112
//   firstName String?
//   // zak
//   lastName  String?
//   // mayfield

//   shippingAddress   MemberShippingAddress? @relation(fields: [shippingAddressId], references: [id])
//   shippingAddressId Int?

//   billingAddress    MemberBillingAddress?  @relation(fields: [billingAddressId], references: [id])
//   billingAddressId  Int?

//   payment   MemberPayment? @relation(fields: [paymentId], references: [id])
//   paymentId Int?

//   cart Cart[]
// }

// // CART
// model CartItem {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   product   Product? @relation(fields: [productId], references: [id])
//   productId Int?

//   cart   Cart? @relation(fields: [cartId], references: [id])
//   cartId Int?
// }

// model Cart {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   total Int?

//   member   Member? @relation(fields: [memberId], references: [id])
//   memberId Int?

//   products CartItem[]
// }

// // ORDER
